# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode
name: $(Year:yy)$(DayOfYear).$(Rev:r)

trigger:
  branches:
    include:
      - master
      - "release/*"
      - "staging/*"

variables:
# must be created in the azure UI under Pipelines > Library and specify accessKey, secretKey, region, and bucket
- group: 's3-public-bucket-upload'
# Provides: P12_PASSWORD, APPLICATION_SIGNING_IDENTITY, INSTALLER_SIGNING_IDENTITY, ALTOOL_USERNAME, ALTOOL_APP_PASSWORD
- group: 'macos-signing'
- name: sdk
  value: macosx12.3
- name: xcodeDeveloperDir
  value: '/Applications/Xcode_14.0.app/Contents/Developer'
- name: configuration
  value: 'Release'
- name: workspacePath
  value: '**/Morphic.xcworkspace'
- name: finalVersion
  value: '1.$(Build.BuildNumber)'
# This means the pipeline will configure all signing options
- name: signingOption
  value: 'default' # this setting uses the builtin project configuration options for signing
- name: extraArgs
  value: 'OTHER_CODE_SIGN_FLAGS="--timestamp" CURRENT_PROJECT_VERSION="$(Build.BuildNumber)"'

pool:
  vmImage: 'macOS-12'

stages:
  - stage: build
    jobs:
      - job: build
        steps:
        - task: InstallAppleCertificate@2
          inputs:
            certSecureFile: 'raising_the_floor_5AAXYGZ428.p12'
            certPwd: '$(P12_PASSWORD)'  
        - task: InstallAppleProvisioningProfile@1
          inputs:
            provProfileSecureFile: 'Morphic_Launcher_for_macOS.provisionprofile'
        - task: InstallAppleProvisioningProfile@1
          inputs:
            provProfileSecureFile: 'Morphic_Dock_App_for_macOS.provisionprofile'
        - task: InstallAppleProvisioningProfile@1
          inputs:
            provProfileSecureFile: 'Morphic_Configurator_for_macOS.provisionprofile'
        - task: InstallAppleProvisioningProfile@1
          inputs:
            provProfileSecureFile: 'Morphic_Client_for_macOS.provisionprofile'

        - task: Xcode@5
          displayName: Build MorphicCore
          inputs:
            actions: 'build'
            sdk: $(sdk)
            scheme: 'MorphicCore'
            configuration: '$(configuration)'
            xcWorkspacePath: '$(workspacePath)'
            xcodeVersion: specifyPath
            xcodeDeveloperDir: $(xcodeDeveloperDir)
            useXcpretty: false
            signingOption: '$(signingOption)'
            args: '$(extraArgs)'
        - task: Xcode@5
          displayName: Build MorphicMacOSNative
          inputs:
            actions: 'build'
            sdk: $(sdk)
            scheme: 'MorphicMacOSNative'
            configuration: '$(configuration)'
            xcWorkspacePath: '$(workspacePath)'
            xcodeVersion: specifyPath
            xcodeDeveloperDir: $(xcodeDeveloperDir)
            useXcpretty: false
            signingOption: '$(signingOption)'
            args: '$(extraArgs)'
        - task: Xcode@5
          displayName: Build MorphicTelemetry
          inputs:
            actions: 'build'
            sdk: $(sdk)
            scheme: 'MorphicTelemetry'
            configuration: '$(configuration)'
            xcWorkspacePath: '$(workspacePath)'
            xcodeVersion: specifyPath
            xcodeDeveloperDir: $(xcodeDeveloperDir)
            useXcpretty: false
            signingOption: '$(signingOption)'
            args: '$(extraArgs)'
        - task: Xcode@5
          displayName: Build MorphicService
          inputs:
            actions: 'build'
            sdk: $(sdk)
            scheme: 'MorphicService'
            configuration: '$(configuration)'
            xcWorkspacePath: '$(workspacePath)'
            xcodeVersion: specifyPath
            xcodeDeveloperDir: $(xcodeDeveloperDir)
            useXcpretty: false
            signingOption: '$(signingOption)'
            args: '$(extraArgs)'
        - task: Xcode@5
          displayName: Build MorphicSettings
          inputs:
            actions: 'build'
            sdk: $(sdk)
            scheme: 'MorphicSettings'
            configuration: '$(configuration)'
            xcWorkspacePath: '$(workspacePath)'
            xcodeVersion: specifyPath
            xcodeDeveloperDir: $(xcodeDeveloperDir)
            useXcpretty: false
            signingOption: '$(signingOption)'
            args: '$(extraArgs)'
        - task: Xcode@5
          displayName: Build MorphicConfigurator
          inputs:
            actions: 'build'
            sdk: $(sdk)
            scheme: 'MorphicConfigurator'
            configuration: '$(configuration)'
            xcWorkspacePath: '$(workspacePath)'
            xcodeVersion: specifyPath
            xcodeDeveloperDir: $(xcodeDeveloperDir)
            useXcpretty: false
            signingOption: '$(signingOption)'
            args: '$(extraArgs)'
        - task: Xcode@5
          displayName: Build MorphicLauncher
          inputs:
            actions: 'build'
            sdk: $(sdk)
            scheme: 'MorphicLauncher'
            configuration: '$(configuration)'
            xcWorkspacePath: '$(workspacePath)'
            xcodeVersion: specifyPath
            xcodeDeveloperDir: $(xcodeDeveloperDir)
            useXcpretty: false
            signingOption: '$(signingOption)'
            args: '$(extraArgs)'
        - task: Xcode@5
          displayName: Build MorphicDockApp
          inputs:
            actions: 'build'
            sdk: $(sdk)
            scheme: 'MorphicDockApp'
            configuration: '$(configuration)'
            xcWorkspacePath: '$(workspacePath)'
            xcodeVersion: specifyPath
            xcodeDeveloperDir: $(xcodeDeveloperDir)
            useXcpretty: false
            signingOption: '$(signingOption)'
            args: '$(extraArgs)'
        - task: Xcode@5
          displayName: Build Morphic
          inputs:
            actions: 'build'
            sdk: $(sdk)
            scheme: 'Morphic'
            configuration: '$(configuration)'
            xcWorkspacePath: '$(workspacePath)'
            xcodeVersion: specifyPath
            xcodeDeveloperDir: $(xcodeDeveloperDir)
            useXcpretty: false
            signingOption: '$(signingOption)'
            args: '$(extraArgs)'
        - task: Bash@3
          displayName: Notarize 'Morphic.dmg'
          env:
            BRANCH: $(Build.SourceBranch)
            BRANCH_NAME: $(Build.SourceBranchName)
            DMG_PATH: './Morphic/Morphic.dmg'
            BUNDLE_ID: 'org.raisingthefloor.Morphic.dmg'
            USERNAME: '$(ALTOOL_USERNAME)'
            APP_PASSWORD: '$(ALTOOL_APP_PASSWORD)'
            SIGNING_IDENTITY: '$(APPLICATION_SIGNING_IDENTITY)'
          inputs:
            targetType: 'filePath'
            filePath: notarize.sh
        - task: Bash@3
          displayName: Notarize 'Morphic.pkg'
          env:
            BRANCH: $(Build.SourceBranch)
            BRANCH_NAME: $(Build.SourceBranchName)
            PKG_PATH: './Morphic/Morphic.pkg'
            BUNDLE_ID: 'org.raisingthefloor.MorphicInstaller.pkg'
            USERNAME: '$(ALTOOL_USERNAME)'
            APP_PASSWORD: '$(ALTOOL_APP_PASSWORD)'
          inputs:
            targetType: 'filePath'
            filePath: notarize.sh  
        - task: Bash@3
          displayName: Publish Morphic to AWS S3
          env:
            AWS_ACCESS_KEY_ID: $(accessKey)
            AWS_SECRET_ACCESS_KEY: $(secretKey)
            BUCKET: $(bucket)
            AWS_DEFAULT_REGION: $(region)
            BRANCH: $(Build.SourceBranch)
            BRANCH_NAME: $(Build.SourceBranchName)
            LOCAL_DMG: './Morphic/Morphic.dmg'
            LOCAL_PKG: './Morphic/Morphic.pkg'
            AWS_FILE_PREFIX: 'Morphic'
            VERSION: '$(finalVersion)'
          inputs:
            targetType: 'filePath'
            filePath: push-to-s3.sh

  - stage: autoupdate
    jobs:
      - job: autoupdate
        pool:
          vmImage: "ubuntu-18.04"
        steps:
        - task: Bash@3
          displayName: Publish auto-update files to AWS S3
          env:
            AWS_ACCESS_KEY_ID: $(accessKey)
            AWS_SECRET_ACCESS_KEY: $(secretKey)
            BUCKET: $(bucket)
            AWS_DEFAULT_REGION: $(region)
            BRANCH: $(Build.SourceBranch)
            BRANCH_NAME: $(Build.SourceBranchName)
          inputs:
            targetType: 'inline'
            script: |
              set -e
              set -x

              EXTRA_ARGS=""
              S3_OBJECT_PREFIX=""

              if [[ "${BRANCH_NAME}" == "master" ]]; then
                echo "detected master build"
                S3_OBJECT_PREFIX="osx/edge"
                EXTRA_ARGS="--expires $(date -d '+42 days' --iso-8601=seconds)"
                elif [[ "${BRANCH}" == *"staging/"* ]]; then
                  echo "detected staging build"
                  S3_OBJECT_PREFIX="osx/staging"
                  EXTRA_ARGS="--expires $(date -d '+14 days' --iso-8601=seconds)"
                elif [[ "${BRANCH}" == *"release/"* ]]; then
                  echo "detected release build"
                  S3_OBJECT_PREFIX="osx/stable"
                else
                  echo "detected PR build"
                  S3_OBJECT_PREFIX="osx/internal"
                  EXTRA_ARGS="--expires $(date -d '+2 days' --iso-8601=seconds)"
                fi

              S3_PUBLISHED_HTTP_URL="https://d23vryjv7k8eyb.cloudfront.net"

              LOCAL_APPCAST_SOURCE="${AGENT_BUILDDIRECTORY}/Morphic-v1.$(Build.BuildNumber).appcast.xml"
              S3_PKG_OBJECT_NAME="${S3_OBJECT_PREFIX}/Morphic-v1.$(Build.BuildNumber).pkg"
              S3_APPCAST_OBJECT_NAME="${S3_OBJECT_PREFIX}/Morphic-v1.$(Build.BuildNumber).appcast.xml"

              cat > "${LOCAL_APPCAST_SOURCE}" <<EOF
              <?xml version="1.0" encoding="utf-8"?>
              <item>
                  <version>1.$(Build.BuildNumber)</version>
                  <url>${S3_PUBLISHED_HTTP_URL}/${S3_PKG_OBJECT_NAME}</url>
              </item>
              EOF

              echo ${S3_PUBLISHED_HTTP_URL}/${S3_APPCAST_OBJECT_NAME}
              cat "${LOCAL_APPCAST_SOURCE}"

              ls -al ${AGENT_BUILDDIRECTORY}
              aws s3 cp $EXTRA_ARGS "${LOCAL_APPCAST_SOURCE}" "s3://${BUCKET}/${S3_APPCAST_OBJECT_NAME}"
